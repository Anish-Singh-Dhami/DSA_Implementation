<snippet>
	<content><![CDATA[
/*N <= 1e6*/
const int N = 1000011;
int pow1[N], pow2[N], inv1[N], inv2[N];
const int mod1 = 1e9+7, mod2 = 1e9+9;

seed_seq seq{
  (uint64_t) chrono::duration_cast<chrono::nanoseconds>(chrono::high_resolution_clock::now().time_since_epoch()).count(),
  (uint64_t) __builtin_ia32_rdtsc(),
  (uint64_t) (uintptr_t) make_unique<char>().get()
};
mt19937 rng(seq);
int base = uniform_int_distribution<int>(27, 62)(rng);

long long modulo(long long a, long long mod) {
  return (a % mod + mod) % mod;
}
long long mul(long long a, long long b, long long mod) {
  return modulo(modulo(a, mod) * modulo(b, mod), mod);
}
long long sub(long long a, long long b, long long mod) {
  return modulo(modulo(a, mod) - modulo(b, mod) + mod, mod);
}
long long add(long long a, long long b, long long mod) {
  return modulo(modulo(a, mod) + modulo(b, mod), mod);
}

int power(int base, int power, int p) {
  int res = 1ll;
  while(power) {
    if(power%2) {
      res = mul(res, base, p);
    } 
    base = mul(base, base, p);
    power /= 2;
  }
  return res;
}

void preCalc() {
  pow1[0] = pow2[0] = 1;
  inv1[0] = inv2[0] = 1;
  int inverse1 = power(base, mod1-2, mod1);
  int inverse2 = power(base, mod2-2, mod2);
  for(int i = 1; i < N; i++) {
    pow1[i] = mul(pow1[i-1], base, mod1);
    pow2[i] = mul(pow2[i-1], base, mod2);
    inv1[i] = mul(inv1[i-1], inverse1, mod1); 
    inv2[i] = mul(inv2[i-1], inverse2, mod2); 
  }
}

class RollingHash
{
public:
  vector<pair<int,int>> hs;
  RollingHash(string &s) { /*0-based indexing*/
    int n = s.size();
    for(int i = 0; i < n; i++) {
      int h1 = add(i == 0 ? 0 : hs[i-1].F, mul(s[i]-'a'+1, pow1[i], mod1), mod1);
      int h2 = add(i == 0 ? 0 : hs[i-1].S, mul(s[i]-'a'+1, pow2[i], mod2), mod2);
      hs.push_back({h1, h2});
    }
  }

  pair<int,int> getHash(int l, int r) { /*0-based indexing*/
    int h1 = mul(sub(hs[r].F, l == 0 ? 0 : hs[l-1].F, mod1), inv1[l], mod1);
    int h2 = mul(sub(hs[r].S, l == 0 ? 0 : hs[l-1].S, mod2), inv2[l], mod2);
    return {h1, h2};
  } 
};

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>StringHashing</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
