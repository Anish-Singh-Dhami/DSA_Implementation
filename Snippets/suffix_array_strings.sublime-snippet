<snippet>
  <content><![CDATA[
// use build before buildLCP
class SuffixArray {
public:
  vector<int> p, eqc;
  vector<int> lcp;
  int n;
  SuffixArray(string &s) {
    s += '\$';
    n = s.size();
    eqc.assign(n, 0);
    p.resize(n);
    iota(p.begin(), p.end(), 0);
    // base @ k = 0
    sort(p.begin(),p.end(), [&](const int &lhs, const int &rhs) {
      return s[lhs] < s[rhs];
    });
    for(int i = 1; i < n; i++) {
      eqc[p[i]] = eqc[p[i-1]] + (s[p[i]] != s[p[i-1]]);
    }
  } 

  // build suffix-array : p, and equivalence class array : eqc
  void build() {
    // transition k -> k+1
    int k = 0;
    vector<int> eqc_new(n);
    while((1<<k) < n) {
      for(int i = 0; i < n; i++) {
        p[i] = (p[i]-(1<<k)+n)%n;
      }
      count_sort();
      eqc_new[p[0]] = 0;
      for(int i = 1; i < n; i++) {
        pair<int,int> prev, curr;
        prev = {eqc[p[i-1]], eqc[(p[i-1]+(1<<k))%n]};
        curr = {eqc[p[i]], eqc[(p[i]+(1<<k))%n]};
        eqc_new[p[i]] = eqc_new[p[i-1]] + (prev != curr);
      }
      eqc = eqc_new;
      k++;
    }
  }

  // build LCP: LCP[i-1] = lcp(s[p[i]..n-1], s[p[i-1]..n-1])
  void buildLCP(string &s) {
    lcp.assign(n-1, 0);
    int k = 0;
    for(int i = 0; i < n-1; i++) {
      // no need to find the inverse of p : 
      int pIdx = eqc[i]; 
      int j = p[pIdx-1];
      while(s[i+k] == s[j+k]) k++;
      lcp[pIdx-1] = k;
      k = max(0ll, k-1);
    }
  }
  // LCP of two suffixes : 
  // lcp(i, j) : min(LCP[k]), s.t. (epc[i] <= k <= epc[j]-1)
  // range min query DS (either SegTree or Sparse Table)

  void count_sort() {
    vector<int> cntBucket(n);
    vector<int> bucketIdx(n);
    for(auto &idx : p) {
      cntBucket[eqc[idx]]++;
    }
    bucketIdx[0] = 0;
    for(int bucket = 1; bucket < n; bucket++) {
      bucketIdx[bucket] = bucketIdx[bucket-1] + cntBucket[bucket-1];
    }
    vector<int> p_new(n);
    for(auto &idx : p) {
      int bucket = eqc[idx];
      int i = bucketIdx[bucket];
      bucketIdx[bucket]++;
      p_new[i] = idx;
    }
    p = p_new;
  }
};

]]></content>
  <tabTrigger>suffixArrays</tabTrigger>
  <description>Suffix Array for Strings</description>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <!-- <scope >source.python</scope > -->
</snippet>