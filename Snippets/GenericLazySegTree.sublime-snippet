<snippet>
	<content><![CDATA[
${1: /*
  TODO : 
  1. mergeValues(lChild, rChild) : 
    // associative operation works : (a+b)+c = a+(b+c) 
    // Answer doesn't change based on the order of grouping
    // Eg : 
    // Sum Query : lChild + rChild
    // Max Query : max(lChild, rChild)
    // Min Query : min(lChild, rChild)
    // gcd Query : gcd(lChild, rChild)

  2. mergeOperations(old, new) : 
    // associative and commutaitve (normal seg tree) or non-commutative (lazy seg tree) operation works :
    // a*b*c*d = b*a*c*d (commutative) Answer remains same irrespective of the order of calculating
    // unlike non-commutative where order should preserve
    // Eg : 
    // Multiply Update  : [l, r) * v    : old *= new
    // Assign Update    : [l, r) := v   : old = new
    // Addition Update  : [l, r) += v   : old += new

  3. applyOperationOnValues(queryVal, updateVal) : 
    // update operation need to be DISTRIBUTIVE over query operation:
    // LHS : (a[l]*v)@(a[l+1]*v)@...@(a[r-1]*v), where *, @ are abstract operation
    // and " * " is Update Operation and " @ " is Query Operation
    // RHS : (a[l]@a[l+1]@...@a[r-1]) * V 
    // LHS == RHS => DISTRIBUTIVE PROPERTY
    // Eg :
    // Assign Update : =V , Sum Query[l, r) : S =>  V*(r-l+1)   
    // Addition Update : +V, Max Query[l, r) : Mx => Mx + V 
*/}

// T : Node Value, U : Update
template <class T, class U>
class LazySegTree {
public:
  int size;
  T IDENTITY_ElEMENT;
  U IDENTITY_UPDATE;
  vector<T> values;
  vector<U> operations;
  LazySegTree() {}
  LazySegTree(int n, T IDENTITY_ElEMENT, U IDENTITY_UPDATE) {
    size = 1;
    while(size < n) size*=2;
    values.assign(size*2, IDENTITY_ElEMENT);
    operations.assign(size*2, IDENTITY_UPDATE);
    this->IDENTITY_UPDATE = IDENTITY_UPDATE;
    this->IDENTITY_ElEMENT = IDENTITY_ElEMENT;
  }

  void build(vector<T> &arr) { build(0, 0, size, arr); }

  void build(int x, int lx, int rx, vector<T> &arr) {
    if(rx-lx == 1) {
      if(lx < (int)arr.size()) {
        values[x] = arr[lx];
      }
      return;
    }
    int mid = (lx+rx)/2;
    build(2*x+1, lx, mid, arr);
    build(2*x+2, mid, rx, arr);
    values[x] = mergeValues(values[2*x+1], values[2*x+2]);
  }


  T mergeValues(T lChild, T rChild) {
    ${2:T res = min(lChild, rChild);
    return res;}
  }


  U mergeOperations(U childNodeOperation, U parentNodeOperation) {
    ${3:U newChildNodeOperation = childNodeOperation = parentNodeOperation;
    return newChildNodeOperation;}
  }

  T applyOperationOnValues(T queryVal, U updateVal) {
    // Applying opertion value to the queried value.
    ${4:T finalValue = queryVal = updateVal;
    return finalValue;}
  }

  void propagateDown(int x, int lx, int rx) {
    // make sure to overload the == operator for custom class type operations.
    if(operations[x] == IDENTITY_UPDATE) return;
    if(rx-lx == 1) return;
    operations[2*x+1] = mergeOperations(operations[2*x+1], operations[x]);
    operations[2*x+2] = mergeOperations(operations[2*x+2], operations[x]);
    values[2*x+1] = applyOperationOnValues(values[2*x+1], operations[x]);
    values[2*x+2] = applyOperationOnValues(values[2*x+2], operations[x]);
    operations[x] = IDENTITY_UPDATE;
  }

  void rangeUpdate(int l, int r, U upd) { rangeUpdate(l, r, upd, 0, 0, size); }
  void rangeUpdate(int l, int r, U upd, int x, int lx, int rx) {
    propagateDown(x, lx, rx);
    if(l >= rx || lx >= r) return;
    if(l <= lx and r >= rx) {
      // apply the range update
      operations[x] = mergeOperations(operations[x], upd);
      values[x] = applyOperationOnValues(values[x], upd);
      return;
    }
    int mid = (lx+rx)/2;
    rangeUpdate(l, r, upd, 2*x+1, lx, mid);
    rangeUpdate(l, r, upd, 2*x+2, mid, rx);
    values[x] = mergeValues(values[2*x+1], values[2*x+2]);
  }

  T rangeQuery(int l, int r) { return rangeQuery(l, r, 0, 0, size); }
  T rangeQuery(int l, int r, int x, int lx, int rx) {
    propagateDown(x, lx, rx);
    if(l >= rx || lx >= r) return IDENTITY_ElEMENT;
    if(l <= lx and r >= rx) {
      return values[x];
    }
    int mid = (lx+rx)/2;
    T lChild = rangeQuery(l, r, 2*x+1, lx, mid);
    T rChild = rangeQuery(l, r, 2*x+2, mid, rx);
    return mergeValues(lChild, rChild);
  }
  void pprintVal() {
    int k = 2;
    for(int i = 0; i < 2*size-1; i++) {
      cout << values[i] << " ";
      if(i+1 == k-1) {
        k *= 2;
        cout << '\n';
      }
    }
    cout << '\n';
  }
  void pprintOper() {
    int k = 2;
    for(int i = 0; i < 2*size-1; i++) {
      cout << operations[i] << " ";
      if(i+1 == k-1) {
        k *= 2;
        cout << '\n';
      }
    }
    cout << '\n';
  }
};

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>genericLazySegTree</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
