<snippet>
  <content><![CDATA[
/*
  Point Update and Range Query Operation need to be associative : a*(b*c) = (a*b)*c 
    i.e. should get combined to the same value based on any order of grouping
*/
// Range Sum SegTree
class SegTree {
public:
  int size;
  int NEUTRAL_ELEMENT;
  vector<int> value;

  SegTree(int n) {
    // Default value of each node (e.g. 0 for sum)
    NEUTRAL_ELEMENT = 0;
    size = 1;
    while (size < n) size *= 2;
    value.assign(2 * size, NEUTRAL_ELEMENT);
  }

  // Calculate the answer of current node based on its child nodes
  int merge(int a, int b) {
    return a + b;
  }

  void build(vector<int> &a) { build(a, 0, 0, size); }

  void build(vector<int> &a, int x, int lx, int rx) {
    if (rx - lx == 1) {
      if (lx < (int)a.size()) {
          value[x] = a[lx];
      }
      return;
    }
    int mid = (lx + rx) / 2;
    build(a, 2 * x + 1, lx, mid);
    build(a, 2 * x + 2, mid, rx);
    value[x] = merge(value[x * 2 + 1],value[x * 2 + 2]);
  }


  void pointUpdate(int i, int v) { pointUpdate(i, v, 0, 0, size); }

  void pointUpdate(int i, int v, int x, int lx, int rx) {
    if (rx - lx == 1) {
        value[x] = v;
        return;
    }
    int mid = (lx + rx) / 2;
    if (i < mid) {
      pointUpdate(i, v, 2 * x + 1, lx, mid);
    } else {
      pointUpdate(i, v, 2 * x + 2, mid, rx);
    }
    // reflect the changes in value on the parent node based on child nodes.
    value[x] = merge(value[2 * x + 1], value[2 * x + 2]);
  }

  // B/w : [l , r) : Query Operation must be associative.
  int rangeQuery(int l, int r) { return rangeQuery(l, r, 0, 0, size); }

  int rangeQuery(int l, int r, int x, int lx, int rx) {
    // Non-Overlapping Segment
    if (l >= rx || lx >= r) return NEUTRAL_ELEMENT;
    // Overlapping Segment
    if (lx >= l && rx <= r) return value[x];

    // Partial Overlapping Segment 
    int mid = (lx + rx) / 2;
    int s1 = rangeQuery(l, r, 2 * x + 1, lx, mid);
    int s2 = rangeQuery(l, r, 2 * x + 2, mid, rx);
    // combine the value of the range [l, r) based on the value from left and right halves.
    return merge(s1, s2);
  }
};

]]></content>
  <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
  <tabTrigger>pointUpdateRangeQuerySegtree</tabTrigger>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <!-- <scope>source.python</scope> -->
</snippet>
