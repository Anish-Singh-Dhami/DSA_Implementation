<snippet>
	<content><![CDATA[
/*******************************************DEBUGGER****************************************************/
#ifndef ONLINE_JUDGE
#define debug(x) cerr << #x <<" "; print(x); cerr << nline;
#else
#define debug(x)
#endif
 
void print(ll t) {cerr << t;}
void print(int t) {cerr << t;}
void print(string t) {cerr << t;}
void print(char t) {cerr << t;}
void print(ld t) {cerr << t;}
void print(double t) {cerr << t;}
void print(ull t) {cerr << t;}
 
template <typename T, typename V> void print(pair <T, V> p);
template <typename T> void print(vector <T> v);
template <typename T> void print(set <T> v);
template <typename T> void print(unordered_set <T> v);
template <typename T, typename V> void print(map <T, V> v);
template <typename T, typename V> void print(unordered_map <T, V> v);
template <typename T> void print(multiset <T> v);
template <typename T, typename V> void print(pair <T, V> p) {cerr << "{ "; print(p.ff); cerr << ","; print(p.ss); cerr << " }";}
template <typename T> void print(vector <T> v) {cerr << "[ "; for (T i : v) {print(i); cerr << " ";} cerr << "]";}
template <typename T> void print(set <T> v) {cerr << "[ "; for (T i : v) {print(i); cerr << " ";} cerr << "]";}
template <typename T> void print(unordered_set <T> v) {cerr << "[ "; for (auto i : v) {print(i); cerr << " ";} cerr << "]";}
template <typename T> void print(multiset <T> v) {cerr << "[ "; for (T i : v) {print(i); cerr << " ";} cerr << "]";}
template <typename T, typename V> void print(map <T, V> v) {cerr << "[ "; for (auto i : v) {cerr << nline << '\t'; print(i.ff); cerr << " : ";print(i.ss);} cerr << nline << "]";}
template <typename T, typename V> void print(unordered_map <T, V> v) {cerr << "[ "; for (auto i : v) {cerr << nline << '\t'; print(i.ff); cerr << " : ";print(i.ss);} cerr << nline << "]";}
/**********************************************************************************************************/

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>error</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
