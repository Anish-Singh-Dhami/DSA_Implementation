<snippet>
	<content><![CDATA[
class Manacher {
  public:
  string t, s;
  vector<int> p;
  Manacher(string s) {
    this->s = s;
  }
  void build() {
    for(auto &ch : s) {
      t += string("#")+ch;
    }
    t += "#";
    int n = t.size();
    p.assign(n, 1);
    int l = 1, r = 1;
    for(int i = 1; i < n; i++) {
      p[i] = max(0ll, min(r-i, p[r-i + l]));
      while(i-p[i] >= 0 and i+p[i] < n and t[i+p[i]] == t[i-p[i]]) p[i]++;
      if(i+p[i] > r) {
        l = i-p[i]+1, r = i+p[i]-1;
      }
    }
  }
  string longestPalindrome() {
    int len, idx;
    len = *max_element(all(p)) - 1;
    idx = max_element(all(p)) - p.begin();
    idx = (idx/2) - (len/2);
    return s.substr(idx, len);
  }
  // 0 based indexing
  int getLongPalindrome(int center, bool oddLen) {
    int idx = 2*center+1+(!oddLen);
    return p[idx]-1;
  }
  // 0 based indexing
  bool checkPalindrome(int l, int r) {
    return (r-l+1) <= getLongPalindrome((l+r)/2, l%2 == r%2) ? 1 : 0;
  }
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>manacher</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
