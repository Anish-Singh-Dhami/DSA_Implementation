<snippet>
	<content><![CDATA[
/*  
  Range Query Range Update : requires 2 types of tree one for operation, other for value
  update, query opeartion need to be associative
  update need to be commutative, else use lazy idea. 
  update opeartion should be distributive over query operation
  (a@v).(b@v) ... (k@v) = (a.b.c ... k)@v
*/
class SegTree {
public:
  vector<int> operation; /*range update operation*/
  vector<int> value; /*range query finding*/
  int NEUTRAL_ELEMENT, NO_OPERATION;
  int size;
  SegTree(int n) {
    size = 1;
    while(size <= n) size *= 2;
    NO_OPERATION = 0, NEUTRAL_ELEMENT = 0;
    operation.assign(size*2, NO_OPERATION); 
    value.assign(size*2, NEUTRAL_ELEMENT);
    // build(0, 0, size);
  }

  void build(int x, int lx, int rx) {
    if(rx-lx == 1) {
      value[x] = 1;
      return;
    }
    int mid = (lx+rx) / 2;
    build(2*x+1, lx, mid);
    build(2*x+2, mid, rx);
    // value[x] = value[2*x+1] + value[2*x+2];
    value[x] = rangeCalculation(value[2*x+1], value[2*x+2]);
  }

  int rangeModification(int a, int b) {
    /*range update operation*/
    return a|b;
  }
  
  int rangeCalculation(int a, int b) {
    /*range query operation*/
    return a&b;
  }

  void rangeUpdate(int l, int r, int v, int x, int lx, int rx) {
    if(l >= rx || lx >= r) return ;
    if(l <= lx and r >= rx) {
      operation[x] = rangeModification(operation[x], v);
      value[x] = rangeModification(value[x], v);
      return;
    }
    int mid = (lx+rx) / 2;
    rangeUpdate(l, r, v, 2*x+1, lx, mid);
    rangeUpdate(l, r, v, 2*x+2, mid, rx);

    /*update the value[x] based on left,right child and the current operation applied on the range*/
    value[x] = rangeCalculation(value[2*x+1], value[2*x+2]);
    value[x] = rangeModification(value[x], operation[x]);
  }

  void rangeUpdate(int l, int r, int v) { return rangeUpdate(l, r, v, 0, 0, size); }

  int rangeQuery(int l, int r, int x, int lx, int rx) {
    if(l >= rx || lx >= r) return 0xFFFFFFFF; /*Neutral w.r.t range query (rangeCalculation func) : all bits set*/
    if(l <= lx and r >= rx) {
      return value[x];
    }
    int mid = (lx+rx) / 2;
    int left = rangeQuery(l, r, 2*x+1, lx, mid);
    int right = rangeQuery(l, r, 2*x+2, mid, rx);
    /*
      (a*v)+(b*v)+(c*v)..+(k*v) = v*(a+b+c+..+k)
    */

    int res = rangeCalculation(left, right);
    res = rangeModification(res, operation[x]);
    return res;
  }

  int rangeQuery(int l, int r) { return rangeQuery(l, r, 0, 0, size); }
  void print() {
    int k=0, c=1;
    for(int i = 0; i < 2*size; i++) {
      cout << value[i] << " ";
      if(i == k) {
        cout << '\n';
        k += (1ll<<c);
        c++;
      }
    }
  }
};

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>RangeUpdateAndQuerySegtree</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
