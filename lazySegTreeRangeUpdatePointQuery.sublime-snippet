<snippet>
	<content><![CDATA[

class LazySegTree {
public:
  vector<int> operation;
  int NO_OPERATION {-999};
  int size;
  LazySegTree(int n) {
    size = 1;
    while(size <= n) size *= 2;
    operation.resize(2*size, 0); 
  }

  int applyOperation(int child, int parent) {
    if(parent == NO_OPERATION) { /*Do Nothing*/
      return child;
    }
    /*apply the non commutative operation: return child @ parent (@ = abstract operation)*/
    return child = parent;
  }

  void propagateDown(int x, int lx, int rx) {
    if(rx - lx == 1) {/*leaf node can't propagate further*/
      return;
    }
    operation[2*x+1] = applyOperation(operation[2*x+1], operation[x]);
    operation[2*x+2] = applyOperation(operation[2*x+2], operation[x]);
    operation[x] = NO_OPERATION;
  }

  void rangeUpdate(int l, int r, int v, int x, int lx, int rx) {
    propagateDown(x, lx, rx); /*propagate the previous operation downward => no previous operation left above*/
    if(lx >= r || rx <= l) { 
      return;
    }
    if(l <= lx and r >= rx) {
      operation[x] = applyOperation(operation[x], v);
      return;
    }
    int mid = (lx+rx) / 2;
    rangeUpdate(l, r, v, 2*x+1, lx, mid);
    rangeUpdate(l, r, v, 2*x+2, mid, rx);
  }

  void rangeUpdate(int l, int r, int v) { rangeUpdate(l, r, v, 0, 0, size); }

  int pointQuery(int i, int x, int lx, int rx) {
    propagateDown(x, lx, rx);
    if(rx-lx == 1) {
      return operation[x];
    } 
    int mid = (lx+rx)/2;
    int res;
    if(i < mid) {
      res = pointQuery(i, 2*x+1, lx, mid);
    } else {
      res = pointQuery(i, 2*x+2, mid, rx);
    }
    return res;
  }  

  int pointQuery(int i) { return pointQuery(i, 0, 0, size); }
};

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>lazyRangeUpdatePointQuery</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
